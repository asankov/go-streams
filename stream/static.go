package stream

// This file contains methods that in Java are static methods of the Stream interface.
// Go does not have static methods, that is why we have implemented this as package methods.

// static <T> Stream.Builder<T>	builder()
// Returns a builder for a Stream.
func Builder[T any]() StreamBuilder[T] {
	return StreamBuilder[T]{}
}

// Concat creates a lazily concatenated stream whose elements are all the elements of the first stream
// followed by all the elements of the second stream.
//
// java: static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)
func Concat[T any](a, b Stream[T]) Stream[T] {
	panic("stream: there is no available Stream implementation yet.")
}

// static <T> Stream<T>	empty()
// Returns an empty sequential Stream.
func Empty[T any]() Stream[T] {
	panic("stream: there is no available Stream implementation yet.")
}

// Generate returns an infinite sequential unordered stream where each element is generated by the provided Supplier.
//
//	java: static <T> Stream<T> generate(Supplier<T> s)
func Generate[T any](s Supplier[T]) Stream[T] {
	panic("stream: there is no available Stream implementation yet.")
}

// static <T> Stream<T>	iterate(T seed, UnaryOperator<T> f)
// Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc.
func Iterate[T any](seed T, f UnaryOperator[T]) Stream[T] {
	panic("stream: there is no available Stream implementation yet.")
}

// Of returns a sequential ordered stream whose elements are the specified values.
//
//	java: static <T> Stream<T> of(T... values)
func Of[T any](values ...T) Stream[T] {
	panic("stream: there is no available Stream implementation yet.")
}

// OfSingle returns a sequential Stream containing a single element.
//
//	java: static <T> Stream<T> of(T t)
func OfSingle[T any](t T) Stream[T] {
	panic("stream: there is no available Stream implementation yet.")
}
